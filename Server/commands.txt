# echo "--------------"
# echo "To remove stopped containers, unused images/networks and unreferenced volumes, use: 'docker system prune -a'"
# echo ""
# echo "Check the container: 'docker exec -it dev_container_fastapi_app /bin/bash"
# echo ""
# echo "Check the status of all running containers: 'docker-compose ps'"
# echo ""
# echo "Celery worker monitoring:"
# echo "View active tasks currently being processed by Celery: "
# docker exec -it server_service_celery_1 celery -A server.celery_app inspect active
# docker exec -it dev_container_celery_ads celery -A server.celery_app inspect active
# echo "View all registered tasks available in Celery: 'docker exec -it server_service_celery_1 celery -A server.celery_app inspect registered'"
# echo ""
# echo "View queued taks in Redis: 'docker exec -it container_redis_bd redis-cli LRANGE celery 0 -1'"
# echo "Refresh Redis 'docker exec -it container_redis_bd redis-cli FLUSHALL'"
# echo ""
# echo "Verifying task recovery after a container crash:"
# echo """
# - Step 1: Open Terminal (1) and launch tasks using: 'bash ./client.curl'
# - Step 2: Open Terminal (2) list running containers with: 'docker ps', then monitor logs of a Celery worker: 'docker logs -f server_service_celery_1docker logs -f server_service_celery_1'
# - Step 3: Open Terminal (3), simulate a crash by repeatedly killing the Celery process inside the container: 
#     'for i in {1..1000}; do docker exec server_service_celery_2 pkill -9 -f 'celery'; done'
# - Step 4: Return to Terminal (1) and check logs. The tasks handled by the killed container should transition from 'started' back to 'queued', awaiting reassignment.


# Check firewall: sudo ufw allow 444/tcp

# Access EC2 instance metadata on AWS using the IMDSv2 (Instance Metadata Service Version 2, more secure than IMDSv1) token. 
# TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
# echo $TOKEN
# curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id
# curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4
# Access rule in the Security Group: >Instances > Inbound rules  > Edit ...
# Check if the rule has been successfully added: nc -zv 54.155.5.123 444

curl -s "http://localhost:444/get_use_cases"
curl -s --insecure "https://localhost:444/get_use_cases"
curl -s --insecure "https://api.zama.ai:444/get_use_cases"



# Check port: sudo netstat -tulnp | grep :443



API_USERNAME=zama
API_PASSWORD=sbuWufszzGzh3hFCnsvR


# Instance type
TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/
curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-type


ssh -i ios_gpu_keypair.pem ec2-user@ec2-3-252-105-194.eu-west-1.compute.amazonaws.com


[ec2-user@ip-172-31-5-52 ~]$ nvcc --version
-bash: nvcc: command not found
[ec2-user@ip-172-31-5-52 ~]$ lspci | grep -i nvidia
00:1e.0 3D controller: NVIDIA Corporation TU104GL [Tesla T4] (rev a1)
[ec2-user@ip-172-31-5-52 ~]$ 

curl -X GET  http://localhost:81/get_use_cases