# Stage 1: Build Rust binaries (built separately with --rebuild-rust)
FROM rust:1.76 AS rust-builder

# Set working directory
WORKDIR /build

# Copy only the Rust-related files
COPY build_tasks.sh .
COPY tasks/ tasks/

# Run the build script
RUN ./build_tasks.sh

# Stage 2: Final image
FROM python:3.9-slim as python-image

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# Install necessary packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /project
RUN mkdir -p /project/data


# Copy Python dependencies, configuration files and Python server
COPY server_requirements.txt tasks.yaml server.py entrypoint.sh ./
COPY tasks/ad_targeting/data/onehot_ads.pkl /project/data/onehot_ads.pkl

# Install Python dependencies
RUN pip install --no-cache-dir -r server_requirements.txt

# Stage 3: Final image
FROM python-image

# Copy Rust binaries from the rust-builder stage
COPY --from=rust-builder /build/bin/* ./

# Make binaries and entrypoint script executable
RUN chmod +x ./* && chmod +x /project/entrypoint.sh

# Expose necessary ports
EXPOSE 80
EXPOSE 5000

# Set the entrypoint
ENTRYPOINT ["/project/entrypoint.sh"]

# In multi-stage build setup, Docker creates intermediate images. 
# They sometimes appear in the form `<none>:<none>` see: `docker image ls`
# To clean them, do `docker image prune`
